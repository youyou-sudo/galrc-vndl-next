generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model duptimes {
  id                Int                @id @default(autoincrement())
  jsonorl           String
  name              String
  state             Boolean            @default(false)
  Statusdescription String?
  timeVersion       String
  type              String
  updatetime        DateTime           @default(now()) @db.Date
  filess            filesiddatas[]
  vndb              vndbdatas[]
  tags              tags[]
  tags_vndatas      tags_vndatas[]
  relationalIndex   meilisearchdatas[]

  @@index([name], map: "duptimes_name_index")
}

model meilisearchdatas {
  id                Int        @id @default(autoincrement())
  host              String?
  indexName         String?    @unique
  masterKey         String?
  adminKey          String?
  searchKey         String?
  type              String
  primaryKey        String?
  Status            String?
  Statusdescription String?
  relatedDataTables duptimes[]

  @@index([host], map: "meilisearchdatas_host_index")
}

model filesiddatas {
  id        Int        @id @default(autoincrement())
  cloudName String?
  cloud     duptimes   @relation(fields: [cloud_id], references: [id])
  cloud_id  Int
  vid       String?
  filetype  Boolean
  is_dir    Boolean
  path      String
  size      String
  vndbdatas vndbdatas? @relation(fields: [vid], references: [vnid], onDelete: SetNull)

  @@unique([path, vid])
}

model vndbdatas {
  cloud_id     Int
  cloud        duptimes       @relation(fields: [cloud_id], references: [id])
  vnid         String         @id
  alias        String[]
  image        String
  olang        String
  releases     Json
  titles       Json
  description  String
  tags         tags_vndatas[]
  filesiddatas filesiddatas[]
}

model tags {
  id           Int            @id @default(autoincrement())
  gid          String         @unique
  cloud        duptimes       @relation(fields: [cloud_id], references: [id])
  cloud_id     Int
  cat          String
  defaultspoil String
  searchable   String
  applicable   String
  name         String
  name_zh      String?
  alias        String
  description  String
  vndbdatas    tags_vndatas[]

  @@index([name], map: "tags_name_index")
  @@index([alias], map: "tags_alias_index")
}

model tags_vndatas {
  unid            String     @id @unique
  tag             String?
  uid             String
  vid             String?
  average_rating  Float?
  average_spoiler Float?
  lie             String?
  cloud           duptimes   @relation(fields: [cloud_id], references: [id], onDelete: Cascade)
  cloud_id        Int
  vndbdata        vndbdatas? @relation(fields: [vid], references: [vnid], onDelete: SetNull)
  tags            tags?      @relation(fields: [tag], references: [gid], onDelete: SetNull)
}

model users {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  password  String
  twoFactor String?
  identity  String
}

model siteConfig {
  id    Int    @id @default(autoincrement())
  type  String
  value Json?
}
